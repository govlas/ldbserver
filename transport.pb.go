// Code generated by protoc-gen-gogo.
// source: transport.proto
// DO NOT EDIT!

/*
	Package ldbserver is a generated protocol buffer package.

	It is generated from these files:
		transport.proto

	It has these top-level messages:
		TransportBody
		TransportRequest
		TransportResponse
*/
package ldbserver

import proto "github.com/gogo/protobuf/proto"
import math "math"

// discarding unused import gogoproto "github.com/gogo/protobuf/gogoproto/gogo.pb"

import io "io"
import fmt "fmt"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"

import strings "strings"
import sort "sort"
import strconv "strconv"
import reflect "reflect"

import bytes "bytes"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = math.Inf

type TransportRequest_Command int32

const (
	TransportRequest_UNKNOWN TransportRequest_Command = 0
	TransportRequest_GET     TransportRequest_Command = 1
	TransportRequest_PUT     TransportRequest_Command = 2
	TransportRequest_DELETE  TransportRequest_Command = 3
)

var TransportRequest_Command_name = map[int32]string{
	0: "UNKNOWN",
	1: "GET",
	2: "PUT",
	3: "DELETE",
}
var TransportRequest_Command_value = map[string]int32{
	"UNKNOWN": 0,
	"GET":     1,
	"PUT":     2,
	"DELETE":  3,
}

func (x TransportRequest_Command) Enum() *TransportRequest_Command {
	p := new(TransportRequest_Command)
	*p = x
	return p
}
func (x TransportRequest_Command) String() string {
	return proto.EnumName(TransportRequest_Command_name, int32(x))
}
func (x *TransportRequest_Command) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TransportRequest_Command_value, data, "TransportRequest_Command")
	if err != nil {
		return err
	}
	*x = TransportRequest_Command(value)
	return nil
}

type TransportResponse_Status int32

const (
	TransportResponse_UNKNOWN TransportResponse_Status = 0
	TransportResponse_OK      TransportResponse_Status = 1
	TransportResponse_FAIL    TransportResponse_Status = 2
)

var TransportResponse_Status_name = map[int32]string{
	0: "UNKNOWN",
	1: "OK",
	2: "FAIL",
}
var TransportResponse_Status_value = map[string]int32{
	"UNKNOWN": 0,
	"OK":      1,
	"FAIL":    2,
}

func (x TransportResponse_Status) Enum() *TransportResponse_Status {
	p := new(TransportResponse_Status)
	*p = x
	return p
}
func (x TransportResponse_Status) String() string {
	return proto.EnumName(TransportResponse_Status_name, int32(x))
}
func (x *TransportResponse_Status) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TransportResponse_Status_value, data, "TransportResponse_Status")
	if err != nil {
		return err
	}
	*x = TransportResponse_Status(value)
	return nil
}

type TransportBody struct {
	Checksum         *uint32 `protobuf:"varint,1,req,name=checksum" json:"checksum,omitempty"`
	Data             []byte  `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *TransportBody) Reset()         { *m = TransportBody{} }
func (m *TransportBody) String() string { return proto.CompactTextString(m) }
func (*TransportBody) ProtoMessage()    {}

func (m *TransportBody) GetChecksum() uint32 {
	if m != nil && m.Checksum != nil {
		return *m.Checksum
	}
	return 0
}

func (m *TransportBody) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type TransportRequest struct {
	Id               []byte                    `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	Command          *TransportRequest_Command `protobuf:"varint,2,req,name=command,enum=ldbserver.TransportRequest_Command" json:"command,omitempty"`
	Body             *TransportBody            `protobuf:"bytes,3,opt,name=body" json:"body,omitempty"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *TransportRequest) Reset()         { *m = TransportRequest{} }
func (m *TransportRequest) String() string { return proto.CompactTextString(m) }
func (*TransportRequest) ProtoMessage()    {}

func (m *TransportRequest) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *TransportRequest) GetCommand() TransportRequest_Command {
	if m != nil && m.Command != nil {
		return *m.Command
	}
	return TransportRequest_UNKNOWN
}

func (m *TransportRequest) GetBody() *TransportBody {
	if m != nil {
		return m.Body
	}
	return nil
}

type TransportResponse struct {
	Id               []byte                    `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	Status           *TransportResponse_Status `protobuf:"varint,2,req,name=status,enum=ldbserver.TransportResponse_Status" json:"status,omitempty"`
	Body             *TransportBody            `protobuf:"bytes,3,opt,name=body" json:"body,omitempty"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *TransportResponse) Reset()         { *m = TransportResponse{} }
func (m *TransportResponse) String() string { return proto.CompactTextString(m) }
func (*TransportResponse) ProtoMessage()    {}

func (m *TransportResponse) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *TransportResponse) GetStatus() TransportResponse_Status {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return TransportResponse_UNKNOWN
}

func (m *TransportResponse) GetBody() *TransportBody {
	if m != nil {
		return m.Body
	}
	return nil
}

func init() {
	proto.RegisterEnum("ldbserver.TransportRequest_Command", TransportRequest_Command_name, TransportRequest_Command_value)
	proto.RegisterEnum("ldbserver.TransportResponse_Status", TransportResponse_Status_name, TransportResponse_Status_value)
}
func (m *TransportBody) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checksum", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Checksum = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append([]byte{}, data[index:postIndex]...)
			index = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := github_com_gogo_protobuf_proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *TransportRequest) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append([]byte{}, data[index:postIndex]...)
			index = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Command", wireType)
			}
			var v TransportRequest_Command
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (TransportRequest_Command(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Command = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Body == nil {
				m.Body = &TransportBody{}
			}
			if err := m.Body.Unmarshal(data[index:postIndex]); err != nil {
				return err
			}
			index = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := github_com_gogo_protobuf_proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *TransportResponse) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append([]byte{}, data[index:postIndex]...)
			index = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v TransportResponse_Status
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (TransportResponse_Status(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Body == nil {
				m.Body = &TransportBody{}
			}
			if err := m.Body.Unmarshal(data[index:postIndex]); err != nil {
				return err
			}
			index = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := github_com_gogo_protobuf_proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *TransportBody) Size() (n int) {
	var l int
	_ = l
	if m.Checksum != nil {
		n += 1 + sovTransport(uint64(*m.Checksum))
	}
	if m.Data != nil {
		l = len(m.Data)
		n += 1 + l + sovTransport(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TransportRequest) Size() (n int) {
	var l int
	_ = l
	if m.Id != nil {
		l = len(m.Id)
		n += 1 + l + sovTransport(uint64(l))
	}
	if m.Command != nil {
		n += 1 + sovTransport(uint64(*m.Command))
	}
	if m.Body != nil {
		l = m.Body.Size()
		n += 1 + l + sovTransport(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TransportResponse) Size() (n int) {
	var l int
	_ = l
	if m.Id != nil {
		l = len(m.Id)
		n += 1 + l + sovTransport(uint64(l))
	}
	if m.Status != nil {
		n += 1 + sovTransport(uint64(*m.Status))
	}
	if m.Body != nil {
		l = m.Body.Size()
		n += 1 + l + sovTransport(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovTransport(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTransport(x uint64) (n int) {
	return sovTransport(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func NewPopulatedTransportBody(r randyTransport, easy bool) *TransportBody {
	this := &TransportBody{}
	v1 := r.Uint32()
	this.Checksum = &v1
	if r.Intn(10) != 0 {
		v2 := r.Intn(100)
		this.Data = make([]byte, v2)
		for i := 0; i < v2; i++ {
			this.Data[i] = byte(r.Intn(256))
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTransport(r, 3)
	}
	return this
}

func NewPopulatedTransportRequest(r randyTransport, easy bool) *TransportRequest {
	this := &TransportRequest{}
	v3 := r.Intn(100)
	this.Id = make([]byte, v3)
	for i := 0; i < v3; i++ {
		this.Id[i] = byte(r.Intn(256))
	}
	v4 := TransportRequest_Command([]int32{0, 1, 2, 3}[r.Intn(4)])
	this.Command = &v4
	if r.Intn(10) != 0 {
		this.Body = NewPopulatedTransportBody(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTransport(r, 4)
	}
	return this
}

func NewPopulatedTransportResponse(r randyTransport, easy bool) *TransportResponse {
	this := &TransportResponse{}
	v5 := r.Intn(100)
	this.Id = make([]byte, v5)
	for i := 0; i < v5; i++ {
		this.Id[i] = byte(r.Intn(256))
	}
	v6 := TransportResponse_Status([]int32{0, 1, 2}[r.Intn(3)])
	this.Status = &v6
	if r.Intn(10) != 0 {
		this.Body = NewPopulatedTransportBody(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTransport(r, 4)
	}
	return this
}

type randyTransport interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneTransport(r randyTransport) rune {
	return rune(r.Intn(126-43) + 43)
}
func randStringTransport(r randyTransport) string {
	v7 := r.Intn(100)
	tmps := make([]rune, v7)
	for i := 0; i < v7; i++ {
		tmps[i] = randUTF8RuneTransport(r)
	}
	return string(tmps)
}
func randUnrecognizedTransport(r randyTransport, maxFieldNumber int) (data []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		data = randFieldTransport(data, r, fieldNumber, wire)
	}
	return data
}
func randFieldTransport(data []byte, r randyTransport, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		data = encodeVarintPopulateTransport(data, uint64(key))
		v8 := r.Int63()
		if r.Intn(2) == 0 {
			v8 *= -1
		}
		data = encodeVarintPopulateTransport(data, uint64(v8))
	case 1:
		data = encodeVarintPopulateTransport(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		data = encodeVarintPopulateTransport(data, uint64(key))
		ll := r.Intn(100)
		data = encodeVarintPopulateTransport(data, uint64(ll))
		for j := 0; j < ll; j++ {
			data = append(data, byte(r.Intn(256)))
		}
	default:
		data = encodeVarintPopulateTransport(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return data
}
func encodeVarintPopulateTransport(data []byte, v uint64) []byte {
	for v >= 1<<7 {
		data = append(data, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	data = append(data, uint8(v))
	return data
}
func (m *TransportBody) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *TransportBody) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Checksum != nil {
		data[i] = 0x8
		i++
		i = encodeVarintTransport(data, i, uint64(*m.Checksum))
	}
	if m.Data != nil {
		data[i] = 0x12
		i++
		i = encodeVarintTransport(data, i, uint64(len(m.Data)))
		i += copy(data[i:], m.Data)
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TransportRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *TransportRequest) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		data[i] = 0xa
		i++
		i = encodeVarintTransport(data, i, uint64(len(m.Id)))
		i += copy(data[i:], m.Id)
	}
	if m.Command != nil {
		data[i] = 0x10
		i++
		i = encodeVarintTransport(data, i, uint64(*m.Command))
	}
	if m.Body != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintTransport(data, i, uint64(m.Body.Size()))
		n1, err := m.Body.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TransportResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *TransportResponse) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		data[i] = 0xa
		i++
		i = encodeVarintTransport(data, i, uint64(len(m.Id)))
		i += copy(data[i:], m.Id)
	}
	if m.Status != nil {
		data[i] = 0x10
		i++
		i = encodeVarintTransport(data, i, uint64(*m.Status))
	}
	if m.Body != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintTransport(data, i, uint64(m.Body.Size()))
		n2, err := m.Body.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeFixed64Transport(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Transport(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintTransport(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (this *TransportBody) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ldbserver.TransportBody{` +
		`Checksum:` + valueToGoStringTransport(this.Checksum, "uint32"),
		`Data:` + valueToGoStringTransport(this.Data, "byte"),
		`XXX_unrecognized:` + fmt.Sprintf("%#v", this.XXX_unrecognized) + `}`}, ", ")
	return s
}
func (this *TransportRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ldbserver.TransportRequest{` +
		`Id:` + valueToGoStringTransport(this.Id, "byte"),
		`Command:` + valueToGoStringTransport(this.Command, "ldbserver.TransportRequest_Command"),
		`Body:` + fmt.Sprintf("%#v", this.Body),
		`XXX_unrecognized:` + fmt.Sprintf("%#v", this.XXX_unrecognized) + `}`}, ", ")
	return s
}
func (this *TransportResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ldbserver.TransportResponse{` +
		`Id:` + valueToGoStringTransport(this.Id, "byte"),
		`Status:` + valueToGoStringTransport(this.Status, "ldbserver.TransportResponse_Status"),
		`Body:` + fmt.Sprintf("%#v", this.Body),
		`XXX_unrecognized:` + fmt.Sprintf("%#v", this.XXX_unrecognized) + `}`}, ", ")
	return s
}
func valueToGoStringTransport(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func extensionToGoStringTransport(e map[int32]github_com_gogo_protobuf_proto.Extension) string {
	if e == nil {
		return "nil"
	}
	s := "map[int32]proto.Extension{"
	keys := make([]int, 0, len(e))
	for k := range e {
		keys = append(keys, int(k))
	}
	sort.Ints(keys)
	ss := []string{}
	for _, k := range keys {
		ss = append(ss, strconv.Itoa(k)+": "+e[int32(k)].GoString())
	}
	s += strings.Join(ss, ",") + "}"
	return s
}
func (this *TransportBody) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*TransportBody)
	if !ok {
		return fmt.Errorf("that is not of type *TransportBody")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *TransportBody but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *TransportBodybut is not nil && this == nil")
	}
	if this.Checksum != nil && that1.Checksum != nil {
		if *this.Checksum != *that1.Checksum {
			return fmt.Errorf("Checksum this(%v) Not Equal that(%v)", *this.Checksum, *that1.Checksum)
		}
	} else if this.Checksum != nil {
		return fmt.Errorf("this.Checksum == nil && that.Checksum != nil")
	} else if that1.Checksum != nil {
		return fmt.Errorf("Checksum this(%v) Not Equal that(%v)", this.Checksum, that1.Checksum)
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return fmt.Errorf("Data this(%v) Not Equal that(%v)", this.Data, that1.Data)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *TransportBody) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*TransportBody)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Checksum != nil && that1.Checksum != nil {
		if *this.Checksum != *that1.Checksum {
			return false
		}
	} else if this.Checksum != nil {
		return false
	} else if that1.Checksum != nil {
		return false
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *TransportRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*TransportRequest)
	if !ok {
		return fmt.Errorf("that is not of type *TransportRequest")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *TransportRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *TransportRequestbut is not nil && this == nil")
	}
	if !bytes.Equal(this.Id, that1.Id) {
		return fmt.Errorf("Id this(%v) Not Equal that(%v)", this.Id, that1.Id)
	}
	if this.Command != nil && that1.Command != nil {
		if *this.Command != *that1.Command {
			return fmt.Errorf("Command this(%v) Not Equal that(%v)", *this.Command, *that1.Command)
		}
	} else if this.Command != nil {
		return fmt.Errorf("this.Command == nil && that.Command != nil")
	} else if that1.Command != nil {
		return fmt.Errorf("Command this(%v) Not Equal that(%v)", this.Command, that1.Command)
	}
	if !this.Body.Equal(that1.Body) {
		return fmt.Errorf("Body this(%v) Not Equal that(%v)", this.Body, that1.Body)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *TransportRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*TransportRequest)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Id, that1.Id) {
		return false
	}
	if this.Command != nil && that1.Command != nil {
		if *this.Command != *that1.Command {
			return false
		}
	} else if this.Command != nil {
		return false
	} else if that1.Command != nil {
		return false
	}
	if !this.Body.Equal(that1.Body) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *TransportResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*TransportResponse)
	if !ok {
		return fmt.Errorf("that is not of type *TransportResponse")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *TransportResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *TransportResponsebut is not nil && this == nil")
	}
	if !bytes.Equal(this.Id, that1.Id) {
		return fmt.Errorf("Id this(%v) Not Equal that(%v)", this.Id, that1.Id)
	}
	if this.Status != nil && that1.Status != nil {
		if *this.Status != *that1.Status {
			return fmt.Errorf("Status this(%v) Not Equal that(%v)", *this.Status, *that1.Status)
		}
	} else if this.Status != nil {
		return fmt.Errorf("this.Status == nil && that.Status != nil")
	} else if that1.Status != nil {
		return fmt.Errorf("Status this(%v) Not Equal that(%v)", this.Status, that1.Status)
	}
	if !this.Body.Equal(that1.Body) {
		return fmt.Errorf("Body this(%v) Not Equal that(%v)", this.Body, that1.Body)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *TransportResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*TransportResponse)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Id, that1.Id) {
		return false
	}
	if this.Status != nil && that1.Status != nil {
		if *this.Status != *that1.Status {
			return false
		}
	} else if this.Status != nil {
		return false
	} else if that1.Status != nil {
		return false
	}
	if !this.Body.Equal(that1.Body) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
